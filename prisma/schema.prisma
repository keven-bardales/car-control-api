// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                     Int                      @id @default(autoincrement())
  make                   String
  model                  String
  year                   Int
  plate                  String
  vin                    String
  vehicelEntrances       VehicleEntrance[]
  vehicleExits           VehicleExit[]
  totalMilage            Int                      @default(0)
  imageUrl               String?
  driverId               String?
  isDeleted              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  vehicleAssignedDrivers VehicleAssignedDrivers[]
  driver                 Driver?                  @relation(fields: [driverId], references: [id])
  vehicleMileages        VehicleMileage[]
}

model Driver {
  id                     String                   @id @default(uuid())
  name                   String                   @unique
  dni                    String
  birthDate              DateTime
  isDeleted              Boolean                  @default(false)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  vehicleAssignedDrivers VehicleAssignedDrivers[]
  vehicles               Vehicle[]
  VehicleEntrance        VehicleEntrance[]
  VehicleExit            VehicleExit[]
}

model VehicleEntrance {
  id                Int              @id @default(autoincrement())
  vehicle           Vehicle          @relation(fields: [vehicleId], references: [id])
  vehicleId         Int
  entranceDate      DateTime?
  plannedReturnDate DateTime?
  actualReturnDate  DateTime?
  fromLocation      String
  toLocation        String
  notes             String?
  mileage           Int
  driverId          String?
  status            String
  isDeleted         Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  vehicleExits      VehicleExit[]
  VehicleMileage    VehicleMileage[]
  driver            Driver?          @relation(fields: [driverId], references: [id])
}

model VehicleExit {
  id              Int              @id @default(autoincrement())
  vehicle         Vehicle          @relation(fields: [vehicleId], references: [id])
  vehicleId       Int
  entrance        VehicleEntrance? @relation(fields: [entranceId], references: [id])
  entranceId      Int?
  plannedExitDate DateTime?
  actualExitDate  DateTime?
  toLocation      String
  fromLocation    String
  notes           String?
  driverId        String?
  mileage         Int
  status          String
  isDeleted       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  driver          Driver?          @relation(fields: [driverId], references: [id])
  VehicleMileage  VehicleMileage[]
}

model VehicleMileage {
  id           Int              @id @default(autoincrement())
  vehicle      Vehicle          @relation(fields: [vehicleId], references: [id])
  vehicleId    Int
  dateRecorded DateTime         @default(now())
  mileage      Int
  notes        String?
  entrance     VehicleEntrance? @relation(fields: [entranceId], references: [id])
  entranceId   Int?
  exit         VehicleExit?     @relation(fields: [exitId], references: [id])
  exitId       Int?
  isDeleted    Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model VehicleAssignedDrivers {
  id             Int       @id @default(autoincrement())
  vehicle        Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId      Int
  driver         Driver    @relation(fields: [driverId], references: [id])
  driverId       String
  dateAssigned   DateTime
  dateUnassigned DateTime?
  status         String
  isDeleted      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}
